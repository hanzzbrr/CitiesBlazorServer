@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorCities.Data
@inject NavigationManager _navigationManager
@inject BlazorCities.Services.CitiesService _citiesService
@implements IAsyncDisposable

<NavLink class="nav-link" href="Cities/Add">
    <span class="oi oi-plus" aria-hidden="true">Add new</span>

</NavLink>

<h3>Cities</h3>

@if (_cities is null)
{
    <p><em>Loading... !</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Foundation date</th>
                <th>Population</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (City city in _cities)
            {
                <tr>
                    <td>@city.ID</td>
                    <td>@city.Name</td>
                    <td>@city.FoundationDate</td>
                    <td>@city.Population</td>
                    <td>
                        <a class="nav-link" href="Cities/Edit/@city.ID">
                            <span class="oi oi-pencil" aria-hidden="true">Edit</span>
                        </a>
                        <a class="nav-link" href="Cities/Delete/@city.ID">
                            <span class="oi oi-trash" aria-hidden="true">Delete</span>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private HubConnection _hubConnection;
    IEnumerable<City> _cities;


    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/citieshub"))
            .Build();

        _hubConnection.On<IEnumerable<City>>("GetCities", (cities) =>
        {
            _cities = cities;
            StateHasChanged();
        });

        _hubConnection.On<City>("UpdateCity", (city) =>
        {
            var updateCity = _cities.FirstOrDefault(x => x.ID == city.ID);
            updateCity = city;
        });

        //_cities = await Task.Run(() => _citiesService.GetCitiesAsync());

        await _hubConnection.StartAsync();


    }

    public async ValueTask DisposeAsync()
    {
        if(_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
